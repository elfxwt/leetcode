   // 设置两个指针一块一慢
  class Solution {
  public:
	  bool hasCycle(ListNode *head) {
		  ListNode *slow = head,*fast = head;
		  while (slow && fast->next)
		  {
			  slow = slow->next;
			  fast = fast->next->next;
			  if(slow = fast)
				  return true;
		  }
		  return false;
		  

	  }
  };
// 自己的方法。。。更改了原来的数据表。。所以。。有点不完美
  class Solution {
  public:
	  bool hasCycle(ListNode *head) {
		  ListNode *p = head;
		  while (p)
		  {
			  if(p->val != INT_MIN)
				p->val = INT_MIN;
			  else
				  return true;
			  p = p->next;
		  }
		  return false;
		  

	  }
  };
  //  数学
    class Solution {
  public:
	  ListNode *detectCycle(ListNode *head) {
		  ListNode *slow = head,*fast = head;
		  while (fast && fast->next) // 防止空指针异常
		  {
			  slow = slow ->next;
			  fast = fast->next->next;
			  if(slow == fast)
				  break;
		  }
		  if(fast==nullptr || fast->next == nullptr)
			  return NULL;
		  else
		  {
			  ListNode *second = head;
			  while (slow != second)
			  {
				  slow=slow->next;
				  second=second->next;

			  }
			  return second;
		  }
	  }
  };
