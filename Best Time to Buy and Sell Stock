// TNND  这个题做得像骂人！！下面的算法超时了！！

class Solution {
private:
	int* findMaxMin(int first,int end,vector<int> &source)
	{
		int value[2];
		int maxIndex = first,minIndex = first;
		for(int i = first;i <=end;i++)
		{
			if(source[maxIndex] < source[i])
				maxIndex = i;
			if(source[minIndex] > source[i])
				minIndex = i;
		}
		value[0] = maxIndex;
		value[1] = minIndex;
		return value;
	}
	int caculatProfit(int start, int end,vector<int> &source)
	{
		int *midValue = findMaxMin(start,end,source);
		if(midValue[0] >= midValue[1])
			return source[midValue[0]] - source[midValue[1]];
		else
		{
			if(midValue[0] == start && midValue[1]== end)
				return caculatProfit(start+1,end-1,source);

			if(midValue[0]> start && midValue[1] == end)
			{
				int value1 = caculatProfit(start,midValue[0],source);
				int value2 = caculatProfit(midValue[0]+1,midValue[1]-1,source);
				return value1 > value2?value1:value2;
			}
			if(midValue[0] > start && midValue[1] < end) // 
			{
				int value1 =  caculatProfit(midValue[1],end,source);
				int value2 = caculatProfit(start,midValue[0],source);
				return value1 > value2?value1:value2;
			}
			if(midValue[0] == start && midValue[1] < end) // 
			{
				int value1 =  caculatProfit(midValue[1],end,source);
				int value2 = caculatProfit(midValue[0]+1,midValue[1]-1,source);
				return value1 > value2?value1:value2;
			}
		}
	}
			
public:
    int maxProfit(vector<int> &prices) {
		int days = prices.size();
		if(days <= 1)
			return 0;
		else
			return caculatProfit(0,days - 1,prices);
		      
    }
};

// 正确的方法！！一点点代码足够！！贪心法，按个找就是了！！气死了!1



class Solution {
public:
    int maxProfit(vector<int> &prices) {
		int days = prices.size();
		if(days <= 1)
			return 0;
		int minPrice = prices[0];
		int profit = 0;
		for(int i = 1;i < days;i++)
		{
			profit = max(profit,prices[i]- minPrice);
			minPrice = min(minPrice,prices[i]);
		}
		return profit;		      
    }
};
