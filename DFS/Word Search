  一开始想到了一个大概，就是四领域按个去试，并且是以矩阵中的每一数作为起点都去试，然后结果没有想到递归的特性所以卡住了
  看了答案。。豁然。。
  
  class Solution {
  private:
	  bool check(vector<vector<char> > &board,string word,int i,int j,int index,vector<vector<bool>> &visited)
	  {
		  if(index == word.size())
			  return true;
		  if(i < 0 || j < 0 || i >= board.size()|| j >= board[0].size())
			  return false;
		  if(visited[i][j])
			  return false;
		  if(board[i][j] != word[index])
			  return false;
		  visited[i][j] = true;
		  bool result = check(board,word,i+1,j,index+1,visited) ||check(board,word,i,j+1,index+1,visited)
			  || check(board,word,i-1,j,index+1,visited)|| check(board,word,i,j-1,index+1,visited); // 是或的关系，有四路，每路都有可能
		  visited[i][j] = false;// 回退功能，此点下一次还可以被访问
		  return result;
	  }
		  
  public:
	  bool exist(vector<vector<char> > &board, string word) {
		  int n = board.size();
		  int m = 0;
		  if (n > 0)		  
			  m = board[0].size();
		  vector<vector<bool>> visited(n,vector<bool> (m,false));
		  for (int i = 0;i < n;i++)
			  for (int j = 0;j < m;j++)
				if(check(board,word,i,j,0,visited)) //以每一个数为起始去找寻可能的路径
					return true;
		  return false;
	  }

  };
