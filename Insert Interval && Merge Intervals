// about two hours ,当处理繁琐的时候，应该去考虑设置更多的变量去记录全面的信息

class Solution {
public:
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
		int firstIndex = -1;
		int lastIndex = -1;
		int greater = -1;
		int smaller = -1;
		vector<Interval> result;
		for(int i = 0;i < intervals.size();i++)// 从这个遍历中应该去获知更多信息
		{
			if(intervals[i].start <= newInterval.start && intervals[i].end >= newInterval.start)
				firstIndex = i;
			if(intervals[i].end >= newInterval.end && intervals[i].start <= newInterval.end)
				lastIndex = i;
			if(intervals[i].end < newInterval.start)
				greater = i;
			if(intervals[i].start >newInterval.end)
			{
				smaller = i;
				break;            //  直接剪掉就好了！！注意这里可以break
			}
		}
		if(greater != -1) // 前面保留的处理
			for(int i = 0;i <= greater;i++)
				result.push_back(intervals[i]);
		// 中间的处理
		int startVal = firstIndex == -1? newInterval.start:intervals[firstIndex].start;
		int endVal = lastIndex == -1? newInterval.end:intervals[lastIndex].end;
		Interval *tem1 = new Interval(startVal,endVal);
		result.push_back(*tem1);
	
		if(smaller != -1)  // 后面保留的处理
			for(int i = smaller;i < intervals.size();i++)
				result.push_back(intervals[i]);
		return result;
	}		
};

class Solution {
public:
	static bool myfunction(const Interval a,const Interval b) // 一定要加static,，否则会报错
	{
		return a.start < b.start;
	}
    vector<Interval> merge(vector<Interval> &intervals) {
		vector<Interval> result;
		if(intervals.size() > 1)
		{
			sort(intervals.begin(),intervals.end(),myfunction);
			bool flag = false;  // 标记是否是连续合并的
			int tempMax = intervals[0].end;
			for(int i = 1;i < intervals.size();i++)
			{
				if(tempMax < intervals[i].start)
				{
					if(!flag)
						result.push_back(intervals[i-1]);
					if(i == intervals.size()-1)
						result.push_back(intervals[i]);
					flag = false;
				}
				else
				{
					
					if(flag) // 连续是可合并，看看能否合并成一个
						{
							result.back().end = max(tempMax,intervals[i].end);
							tempMax = result.back().end;
							continue;
					} // 这里感觉可以优化。。
					Interval *newVal = new Interval(intervals[i-1].start,max(intervals[i-1].end,intervals[i].end));
					result.push_back(*newVal);
					flag = true;
				}
				tempMax = max(intervals[i-1].end,intervals[i].end);
			}
		}
		else
			result = intervals;
		return result;     
    }
};


