  // 想到了开头，没有想到细节。。。
  
  class Solution {
	  void bfs(int x,int y,vector<vector<char>> &board)
	  {
		  queue<int> q;
		  visited(x,y,board,q);
		  while(!q.empty())
		  {
			  int pos = q.front();
			  q.pop();
			  int posX = pos / board[0].size();
			  int posY = pos % board[0].size();
			  visited(posX-1,posY,board,q);
			  visited(posX + 1,posY,board,q);
			  visited(posX,posY-1,board,q);
			  visited(posX,posY + 1,board,q);

		  }

	  }

	  void visited(int x, int y,vector<vector<char>> &board,queue<int>&q)
	  {
		  const int m = board.size();
		  const int n = board[0].size();
		  if(x < 0 || x >= m || y < 0 || y >= n || board[x][y] != 'O')
			  return;
		  board[x][y] = '#';  // 这个很聪明~
		  q.push(x * n + y);

	  }

  public:
	  void solve(vector<vector<char>> &board) {
		  if(board.size() <= 0) return;
		  int n = board.size();

		  int m = board[0].size();
		  // 上下左右
		  for(int i = 0;i < m;i++)
		  {
			  bfs(0,i,board);
			  bfs(n-1,i,board);
		  }
		  for(int j = 1;j < n-1;j++)
		  {
			  bfs(j,0,board);
			  bfs(j,m-1,board);
		  }
		  
		  for( int i = 0;i < n;i++)
			  for(int j = 0;j < m;j++)
			  {
				  if(board[i][j] == '#')
					  board[i][j] = 'O';
				  else
					  if(board[i][j] == 'O')
						  board[i][j] = 'X'; 
			  }

	  }
  };
