// 自己写的就是啰嗦，一点都不优雅
// 只想着把要左边的先进栈，没有想到右节点也可以先入栈，不弹出，没有充分利用栈的特点。
//但最终是AC了。
class Solution {
public:
    vector<int> preorderTraversal(TreeNode *root) {
		stack<TreeNode*> tempSave;
		vector<int> result;
		TreeNode *tempNode = root;
		if(root == nullptr)
			return result;
		tempSave.push(tempNode);
		result.push_back(tempNode->val);
		tempNode = tempNode->left;
		while(!tempSave.empty()|| tempNode)
		{			
			while(tempNode)
			{
				tempSave.push(tempNode);
				result.push_back(tempNode->val);
				tempNode = tempNode->left;
			}
			if(!tempSave.empty())
			{
				tempNode = tempSave.top()->right;
				tempSave.pop();		
			}
		}
		return result;  
    }  
};   

// 另外一道题目，其实际上是一样的，用到preOrder ，参考其方法

class Solution {
public:
    void flatten(TreeNode *root) {
		TreeNode head(1);
		TreeNode *p = root;
		TreeNode *r = &head; // 多加了一个指针
		stack<TreeNode *> s;
		if(p!=nullptr)
			s.push(p);
		while(!s.empty())
		{
			p = s.top();
			s.pop();
			if(p->right != nullptr) s.push(p->right);
			if(p->left != nullptr) s.push(p->left);
			r->right = p;
			r->left = nullptr;
			r=r->right; // 注意结点和 指针的区别 ，用head = *p 是不行的，root 没有改变
		}
		
    }
};
