//备忘录方法的扩展  ，study it 

class Solution {
	vector<vector<int>>f;
public:
	int dfs(int x,int y,vector<vector<int>> &obstacle)
	{
		if(x <1|| y <1)
			return 0;
		if(obstacle[x-1][y-1] == 1) //比unique path I 多的一步,注意是减1
			return 0;               // obstacleGrid 是从0开始排列的！
		if( x == 1 && y == 1)
			return 1;

		else
			return memo(x-1,y,obstacle) + memo(x,y-1,obstacle);
	}
    int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) {
		int m = obstacleGrid.size();
		int n = obstacleGrid[0].size();
		this->f = vector<vector<int>>(m+1,vector<int>(n+1,0));  // 给二维数组初始化
		return dfs(m,n,obstacleGrid);
        
    }
		int memo(int x,int y,vector<vector<int>> &obstacle)
		{
			if(f[x][y]> 0)
				return f[x][y];
			else
				return f[x][y] = dfs(x,y,obstacle);
		}
};

// 还有动态规划的方法，也需要study !
