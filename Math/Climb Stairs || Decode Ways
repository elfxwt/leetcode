 斐波那契数列的特点： 一步和两步的走
 
 // 斐波那契数列
 f(n) = f(n-1) + f(n - 2)
 // 但是会超时
 
 class Solution {

public:
    int climbStairs(int n) {
		if(n <= 2)
			return n;
		return climbStairs(n - 2) +climbStairs(n - 1);
        
    }
};

class Solution {

public:
    int climbStairs(int n) {
		int cur = 1;
		int pre = 0;
		for(int i = 1;i <= n;i++)
		{
			int temp =  cur;
			cur = temp + pre;
			pre = temp;
		}
		return cur;
        
    }
};

Decode Ways 
第一思路依然是用原来的的深层递归，然后超时。。。
class Solution {
private:
	int dfs(size_t start,int gap ,string s)
	{
		if(start >= s.size())
			return 0;
		if(start == s.size()-1)
			return 1;
		if(gap == 2)
		{
			string temp= s.substr(start,2);
			int num = atoi(temp.c_str());
			if(num > 26)
				return 0;
		}
		return dfs(start+1,1,s) + dfs(start + 1,2,s);
	}

public:
    int numDecodings(string s) {
		if(s.size() >1)
			return dfs(0,1,s) + dfs(0,2,s);
		else
			return 1;
        
    }
};

Submission Result: Time Limit Exceeded

Last executed input:	"4757562545844617494555774581341211511296816786586787755257741178599337186486723247528324612117156948"


//还是得用数学方法，不过要加上限制

pay attention to the details


class Solution {
public:
    int numDecodings(string s) {
		if(s.empty() || s[0] == '0')  // 如果第一个0 那么肯定无解-》但并不是由0就无解，10,20是可以的
			return 0;
		int pre = 0,cur = 1;
		for(int i = 1;i < s.size();++i)
		{
			if(s[i - 1] == '0')  // 里面夹杂有0的话，不是依然无解的。。
				cur = 0;
			if(i < 2 || !(s[i-2] == '1'|| (s[i-2]=='2'&& s[i-1]<= '6'))) // pay attention to this condition !! 里面用的是可以的条件，然后外面非！
				pre = 0;
			int temp = cur;
			cur = cur + pre;
			pre = temp;
		}
		return cur;
    }
};
